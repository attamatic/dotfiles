snippet ife "If Else" b
if $1:
    ${2:pass}
else:
    ${0:pass}
endsnippet

snippet ifef "If Elif" b
if $1:
    ${2:pass}
elif $3:
    ${3:pass}
else:
    ${0:pass}
endsnippet

snippet #! "Python3 #!" b
#!/usr/bin/env python3
endsnippet

snippet class "Class Snippet" b
class $1:
    """
    $1 description.

`!p
for a in t[4].split(','):
    a = a.strip()
    if a.find(':') != -1:
        b = a.split(':')
        b = list(map(str.strip, b))
        snip.rv += '\n    :param ' + b[0] + ' (' + b[1] + '): ' + b[0] + ' description.'

    else:
        snip.rv += '\n    :param ' + a.strip() + ': ' + a.strip() + ' description.'`
    ${2::raises (type): description}
    """

    def __init__(self${3:, $4}):
`!p
for a in t[4].split(','):
    a = a.strip()
    if a.find(':') != -1:
        b = a.split(':')
        b = list(map(str.strip, b))
        snip.rv += '        self.' + b[0] + ': ' + b[1] + ' = ' + b[0] + '\n'
    else:
        snip.rv += '        self.' + a.strip() + ' = ' + a.strip() + '\n'
`
        ${5:pass}

    def __str__(self):
        return "$1(`!p
for a in t[4].split(','):
    a = a.strip()
    if a.find(':') != -1:
        b = a.split(':')
        b = list(map(str.strip, b))
        snip.rv += b[0] + '(' + b[1] + ')=" + str(self.' + b[0] + ') + ", '
    else:
        snip.rv += a.strip() + '=" + str(self.' + a.strip() + ') + ", '
snip.rv = snip.rv[:-2]
`)"

    def __repr__(self):
        return "$1()"
endsnippet

snippet main "__main__" b
if __name__ == "__main__":
    ${0:pass}
endsnippet

snippet te "Try Except" b
try:
    $1
except ${2:Exception} as ${3:e}:
    ${0:pass}
endsnippet

snippet tef "Try Except Finally" b
try:
    $1
except ${2:Exception} as ${3:e}:
    ${4:pass}
finally:
    ${0:pass}
endsnippet

snippet """ "Doctstring" b
"""
$1
:param ${2:name} (${3:type}): ${4:description}
:returns (${5:type}): ${6:description}
:raises (${7:type}): ${8:description}
"""
endsnippet

snippet ?: "Ternary" i
$1 if $2 else $0
endsnippet

snippet lc "List Comprehension" i
$1 for $2 in $0
endsnippet

snippet fr "For Range"
for $1 in range($2):
    $0
endsnippet

snippet frl "For Range Len"
for $1 in range(len($2)):
    $0
endsnippet

snippet fmt "Format String"
"$0".format($1)
endsnippet

snippet pfmt "Print Format String"
print("$0".format($1))
endsnippet
